
name: 'Godot iOS Upload'
description: 'Godot Engine 3.x and 4.x for iOS export and Testflight upload'
branding:
  color: white
  icon: upload-cloud

inputs:
  working-directory:
    description: 'The working directory'
    required: false
    default: '.'
  godot-version:
    description: 'Godot Engine version'
    required: false
    default: '4.2.2'
  project-name:
    description: 'Project name used for xarchive building'
    required: true
  provision-profile-path:
    description: 'Path of a valid provision profile file'
    required: true
  apple-id-password:
    description: 'Apple ID password'
    required: true
  apple-id-username:
    description: 'Apple ID username'
    required: true
  team-id:
    description: 'Apple Developer Team ID'
    required: true


runs:
  using: "composite"
  steps:
    - name: Check if running on macOS
      if: runner.os != 'macos'
      shell: bash
      run: exit 1
    
    - name: Cache Godot files
      id: cache-godot
      uses: actions/cache@v4
      with:
        path: |
          Godot.app
          /Users/runner/Library/Application Support/Godot/
        key: ${{ runner.os }}-godot-${{ inputs.godot-version }}

    - name: Log in to Apple Developer
      shell: bash
      run: |
        xcrun altool --list-providers \
          -u ${{ inputs.apple-id-username }} \
          -p ${{ inputs.apple-id-password }}

    - name: Download and configure Godot Engine linux server and templates
      shell: bash
      if: steps.cache-godot.outputs.cache-hit != 'true'
      run: |
        wget -q https://spine-godot.s3.eu-central-1.amazonaws.com/4.2/4.2.2-stable/godot-editor-macos.zip
        wget -q https://spine-godot.s3.eu-central-1.amazonaws.com/4.2/4.2.2-stable/spine-godot-templates-4.2-4.2.2-stable.tpz
        unzip godot-editor-macos.zip
        unzip spine-godot-templates-4.2-4.2.2-stable.tpz -d templates
        mkdir -p ~/Library/Application\ Support/Godot/export_templates/${{ inputs.godot-version }}.stable
        mv templates/* ~/Library/Application\ Support/Godot/export_templates/${{ inputs.godot-version }}.stable

    - name: Godot iOS export
      shell: bash
      run: ./Godot.app/Contents/MacOS/Godot --headless --path ${{ inputs.working-directory }} --export-release iOS

    - name: Extract Provisioning profile UUID and create PP_UUID env variable
      shell: bash
      run: echo "PP_UUID=$(grep -a -A 1 'UUID' ${{ inputs.provision-profile-path }} | grep string | sed -e "s|<string>||" -e "s|</string>||" | tr -d '\t')" >> $GITHUB_ENV

    - name: Verify Provisioning Profile Placement and UUID
      shell: bash
      run: |
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        if [ -s ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision ]; then
          echo "Provisioning profile is in place and not empty."
        else
          echo "Provisioning profile is missing or empty."
          exit 1
        fi
        chmod +r ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

# Might not need this as we're using cocoapods now
    # - name: Resolve package dependencies
    #   shell: bash
    #   run: xcodebuild -resolvePackageDependencies

    - name: Run admob pod update
      shell: bash
      run: |
        cd ${{inputs.working-directory}}/ios/plugins/poing-godot-admob/scripts
        chmod +x update_and_install.sh
        ./update_and_install.sh


    - name: Build the xarchive using .xcworkspace
      shell: bash
      run: |
        set -eo pipefail
        xcodebuild clean archive \
          -workspace ${{ inputs.project-name }}.xcworkspace \
          -scheme ${{ inputs.project-name }} \
          -configuration "Release" \
          -sdk iphoneos \
          -archivePath "$PWD/build/${{ inputs.project-name }}.xcarchive" \
          -destination "generic/platform=iOS,name=Any iOS Device" \
          CODE_SIGN_STYLE=Automatic \
          CODE_SIGN_IDENTITY="iOS Distribution" \
          DEVELOPMENT_TEAM="${{ inputs.team-id }}"

    - name: Export .ipa
      shell: bash
      run: |
        set -eo pipefail
        xcodebuild -archivePath "$PWD/build/${{ inputs.project-name }}.xcarchive" \
          -exportOptionsPlist exportOptions.plist \
          -exportPath $PWD/build \
          CODE_SIGN_STYLE=Automatic \
          DEVELOPMENT_TEAM="${{ inputs.team-id }}" \
          -exportArchive

    - name: Publish the App on TestFlight
      shell: bash
      if: success()
      env:
        APPLEID_USERNAME: ${{ inputs.apple-id-username }}
        APPLEID_PASSWORD: ${{ inputs.apple-id-password }}
      run: |
        xcrun altool \
          --upload-app \
          -t ios \
          -f $PWD/build/*.ipa \
          -u "${{ inputs.apple-id-username }}" \
          -p "${{ inputs.apple-id-password }}" \
          --verbose
